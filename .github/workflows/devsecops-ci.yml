name: DevSecOps Pipeline

on: push

permissions:
  contents: read

jobs:
  run_fs_scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sari
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List directory contents
        run: ls -l

      - name: Run Trivy vulnerability scanner in FS mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          trivy-config: trivy.yaml
      - name: List directory contents before Trivy scan
        run: ls -l
  run_iac_scan:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Run Trivy vulnerability scanner in IaC mode
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: 'fs'
            ignore-unfixed: true
            format: 'sarif'
            output: 'trivy-results.sarif'
            severity: 'CRITICAL,HIGH'

        - name: Set up Trivy
          run: |
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install -y trivy

        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: trivy-report
            path: 'trivy-results.sarif'

        - name: Run Trivy scan
          run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .
  run_sast_scan:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
      - name: clone application source code
        uses: actions/checkout@v3

      - name: run semgrep
        run: |
          semgrep \
            --sarif --output semgrep.sarif \
            --metrics=off \
            --config="p/default"

      - name: save report as pipeline artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep.sarif
          path: semgrep.sarif

      - name: Download report
        uses: actions/download-artifact@v2
        with:
          name: semgrep.sarif
  run_sca_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit --json > npm-audit-report.json || true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v2
        with:
          name: npm-audit-report
          path: npm-audit-report.json
  run_dast_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Config docker
        uses: docker/setup-buildx-action@v1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          npm run build

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: 'https://www.zaproxy.org/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
  run_secrets_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
